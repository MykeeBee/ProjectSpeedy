openapi: 3.0.3
tags: 
  - name: "Projects"
  - name: "Project"
  - name: "Problem"
  - name: "Bet"
  - name: "Bet Comments"
  - name: "Bet Feedback"
  - name: "Bet Outcomes"
info:
  title: Project Speedy
  description: The goal of project speedy is to create an application that makes running a lean project easy<br/><br/> TODOS <ul><li>No way of updating a project in the wireframe.</li><li>Add User id to all elements</li></ul>
  contact:
    name: Matthew Turner
    email: tmatt95@gmail.com
  version: 1.0.0
paths:
  /projects:
    get:
      summary: Gets all projects
      tags: 
        - Projects
      description: Projects allows the application to group problems and bets together in one place. This will return all of the projects in the applcation.
      responses:
        '200':
          description: A list of all the projects.
          content: 
            application/json:
              schema: 
                type: array
                items:
                  $ref: '#/components/schemas/ListItem'
        '403':
          $ref: '#/components/responses/UnAuthorised'
  /project:
    put:
      summary: Add a new project
      tags: 
        - Project
      description: Every bet needs to be linked to a problem and a problem needs to be linked to a project. This lets the user create a new project. Very little information is required when creating a project. This can be filled in at a later date (as it might not be known at the time).
      requestBody:
        content: 
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectNew'
      responses:
        '202':
          $ref: '#/components/responses/ActionSuccess'
        '403':
          $ref: '#/components/responses/UnAuthorised'
  /project/{ProjectId}:
    get:
      summary: Get project information
      tags: 
        - Project
      description: Returns all the information on a project along with a list of problems attached to it.
      responses:
        '200':
          description: Information on the project / a list of problems linked to it.
          content: 
            application/json:
              schema:
                  $ref: '#/components/schemas/ProjectView'
        '403':
          $ref: '#/components/responses/UnAuthorised'
        '404':
          $ref: '#/components/responses/NotFound'
    post:
      summary: Update a project
      tags: 
        - Project
      description: The create project action has been designed to be simple and contain the minimum number of fields. The user will need to have the ability to update the project to add missing information <b>(TODO - no way of updating project on wireframe)</b>.
      requestBody:
        content: 
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectUpdate'
      responses:
        '202':
          $ref: '#/components/responses/ActionSuccess'
        '403':
          $ref: '#/components/responses/UnAuthorised'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      summary: Delete a project
      tags:
        - Project
      description: This action will delete the project and linked problems / bets.
      responses:
        '202':
          $ref: '#/components/responses/ActionSuccess'
        '403':
          $ref: '#/components/responses/UnAuthorised'
        '404':
          $ref: '#/components/responses/NotFound'
    parameters:
      - $ref: '#/components/parameters/ProjectId'
  /project/{ProjectId}/problem:
    put:
      summary: Add a new problem
      tags: 
        - Problem
      description: This will let you add a problem to a project. You will then be able to place bets against the problem and try and solve it.
      requestBody:
        content: 
          application/json:
            schema:
              $ref: '#/components/schemas/ProblemNew'
      responses:
        '202':
          description: Problem added.
        '403':
          $ref: '#/components/responses/UnAuthorised'
        '404':
          $ref: '#/components/responses/NotFound'
    parameters:
      - $ref: '#/components/parameters/ProjectId'
  /project/{ProjectId}/problem/{ProblemId}:
    get:
      summary: Get problem information
      tags: 
        - Problem
      description: This will get all the information on the problem (including a list of linked bets).
      responses:
        '200':
          description: Problem information and list of bets.
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemView'
        '403':
          $ref: '#/components/responses/UnAuthorised'
        '404':
          $ref: '#/components/responses/NotFound'
    post:
      summary: Update a problem
      tags: 
        - Problem
      description: Ideally before adding bets, this API will be used to add as much information as possible to the problem. All the bets made will try and solve this.<br/> <br/> Try and make the desciption as clear as possible and the success criteria unambigous so it is clear when the project has been solved.
      requestBody:
        content: 
          application/json:
            schema:
              $ref: '#/components/schemas/ProblemUpdate'
      responses:
        '202':
          description: Problem updated.
        '403':
          $ref: '#/components/responses/UnAuthorised'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      summary: Delete a problem
      tags:
        - Problem
      description: This action will delete the problem and all linked bets.
      responses:
        '202':
          $ref: '#/components/responses/ActionSuccess'
        '403':
          $ref: '#/components/responses/UnAuthorised'
        '404':
          $ref: '#/components/responses/NotFound'
    parameters:
      - $ref: '#/components/parameters/ProjectId'
      - $ref: '#/components/parameters/ProblemId'
  /project/{ProjectId}/problem/{ProblemId}/bet/{BetId}/start:
    post:
      summary: Update bet to say it is started
      tags: 
        - Bet
      description: Starting a bet tells the system that some one has actively started to work on determining if it will solve the problem. Once a bet has been started we will limit the editing of the bet so it cannot be altered. <br/> <br/>Instead of editing the bet if you need to alter it drastically, finish the bet, record the reasons and create a new linked bet.
      responses:
        '202':
          $ref: '#/components/responses/ActionSuccess'
        '404':
          description: Cant find project, problem, bet or they are an invalid combination.
        '403':
          $ref: '#/components/responses/UnAuthorised'
    parameters:
      - $ref: '#/components/parameters/ProjectId'
      - $ref: '#/components/parameters/ProblemId'
      - $ref: '#/components/parameters/BetId'
  /project/{ProjectId}/problem/{ProblemId}/bet/{BetId}/end:
    post:
      summary: Update bet to finished
      tags: 
        - Bet
      description: Bets will automatically finish when the time has ended. If the bet can be finished before then, this will give the user to set the bet to the review stage.
      responses:
        '202':
          $ref: '#/components/responses/ActionSuccess'
        '404':
          description: Cant find project, problem, bet or they are an invalid combination.
        '403':
          $ref: '#/components/responses/UnAuthorised'
    parameters:
      - $ref: '#/components/parameters/ProjectId'
      - $ref: '#/components/parameters/ProblemId'
      - $ref: '#/components/parameters/BetId'
  /project/{ProjectId}/problem/{ProblemId}/bet/{BetId}:
    put:
      summary: Add a new bet
      tags: 
        - Bet
      description: Add a new bet to a problem. As with the problem and project this form only asks for the minimum amount of information. This can be added before the bet is started. 
      requestBody:
        content: 
          application/json:
            schema:
              $ref: '#/components/schemas/BetNew'
      responses:
        '202':
          description: Bet added.
        '403':
          $ref: '#/components/responses/UnAuthorised'
        '404':
          $ref: '#/components/responses/NotFound'
    get:
      summary: Get bet information
      tags: 
        - Bet
      description: Gets all the information related to a bet.
      responses:
        '200':
          description: problem information and list of bets.
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/BetView'
        '403':
          $ref: '#/components/responses/UnAuthorised'
        '404':
          $ref: '#/components/responses/NotFound'
    post:
      summary: Update a bet
      tags: 
        - Bet
      description: Add a new bet.
      requestBody:
        content: 
          application/json:
            schema:
              $ref: '#/components/schemas/BetUpdate'
      responses:
        '202':
          description: Problem added.
        '403':
          $ref: '#/components/responses/UnAuthorised'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      summary: Delete a bet
      tags:
        - Bet
      description: This action will delete the bet.
      responses:
        '202':
          $ref: '#/components/responses/ActionSuccess'
        '403':
          $ref: '#/components/responses/UnAuthorised'
        '404':
          $ref: '#/components/responses/NotFound'
    parameters:
      - $ref: '#/components/parameters/ProjectId'
      - $ref: '#/components/parameters/ProblemId'
      - $ref: '#/components/parameters/BetId'
  /project/{ProjectId}/problem/{ProblemId}/bet/{BetId}/comments:
    put:
      summary: Add a comment to a bet
      tags: 
        - Bet Comments
      description: Add comments to a bet.
      requestBody:
        content: 
          application/json:
            schema:
              $ref: '#/components/schemas/BetCommentNew'
      responses:
        '202':
          description: Comment added.
        '403':
          $ref: '#/components/responses/UnAuthorised'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      summary: Delete comment
      tags:
        - Bet Comments
      description: Delete a comment.
      responses:
        '202':
          $ref: '#/components/responses/ActionSuccess'
        '403':
          $ref: '#/components/responses/UnAuthorised'
        '404':
          $ref: '#/components/responses/NotFound'
    parameters:
      - $ref: '#/components/parameters/ProjectId'
      - $ref: '#/components/parameters/ProblemId'
      - $ref: '#/components/parameters/BetId'
  /project/{ProjectId}/problem/{ProblemId}/bet/{BetId}/feedback:
    put:
      summary: Add feedback to a bet
      tags: 
        - Bet Feedback
      description: Add comments to a bet.
      requestBody:
        content: 
          application/json:
            schema:
              $ref: '#/components/schemas/BetFeedbackNew'
      responses:
        '202':
          description: Comment added.
        '403':
          $ref: '#/components/responses/UnAuthorised'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      summary: Delete feedback
      tags:
        - Bet Feedback
      description: Delete a piece of feedback from a bet.
      responses:
        '202':
          $ref: '#/components/responses/ActionSuccess'
        '403':
          $ref: '#/components/responses/UnAuthorised'
        '404':
          $ref: '#/components/responses/NotFound'
    parameters:
      - $ref: '#/components/parameters/ProjectId'
      - $ref: '#/components/parameters/ProblemId'
      - $ref: '#/components/parameters/BetId'
  /project/{ProjectId}/problem/{ProblemId}/bet/{BetId}/outcome:
    put:
      summary: Add an outcome to a bet
      tags: 
        - Bet Outcomes
      description: Use this form to add an outcome after a bet has finished.
      requestBody:
        content: 
          application/json:
            schema:
              $ref: '#/components/schemas/BetOutcomeNew'
      responses:
        '202':
          description: Comment added.
        '403':
          $ref: '#/components/responses/UnAuthorised'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      summary: Delete an outcome
      tags:
        - Bet Outcomes
      description: Delete an outcome.
      responses:
        '202':
          $ref: '#/components/responses/ActionSuccess'
        '403':
          $ref: '#/components/responses/UnAuthorised'
        '404':
          $ref: '#/components/responses/NotFound'
    parameters:
      - $ref: '#/components/parameters/ProjectId'
      - $ref: '#/components/parameters/ProblemId'
      - $ref: '#/components/parameters/BetId'
components:
  schemas:
      ProjectUpdate:
        description: Form used when updating a project.
        type: object
        required:
          - name
        properties:
          name:
            type: string
            example: Project Speedy
          description:
            type: string
            example: The goal of project speedy is to create an application that makes running a lean project easy.
      ListItem:
        description: Used to display brief information on an item (generally used to populate the tiles).
        type: object
        required:
          - name
        properties:
          id:
            type: string
            example: "44828849-d4fa-4945-a7c6-134e5fbc0a38"
          name:
            type: string
            example: Item Name
          status:
            type: string
            example: not started
      ProjectView:
        description: Information on a single project / list of problems within it.
        type: object
        properties:
          id:
            type: string
            example: "44828849-d4fa-4945-a7c6-134e5fbc0a38"
          name:
            type: string
            example: Project Speedy
          description:
            type: string
            example: The goal of project speedy is to create an application that makes running a lean project easy.
          created:
            type: string
            readOnly: true
            format: date-time
            example: 02/03/2021
          problems:
            type: array
            items:
              $ref: '#/components/schemas/ListItem'
      ProjectNew:
        description: Form for adding a new project.
        type: object
        required:
          - name
        properties:
          name:
            type: string
            example: Project Speedy
      ProblemNew:
        description: Form used for adding a new problem to the application.
        type: object
        required:
          - name
        properties:
          name:
            type: string
            example: No one will use it
          description:
            type: string
            example: If no one uses the application the it will die. Finding users who are enthusiastic in the product will be inportant.
          successCriteria:
            type: string
            example: We will know this is no longer a problem when we have got 10 companies interested in using the application.
      ProblemUpdate:
        description: Form used for updating a problem.
        type: object
        required:
          - name
        properties:
          name:
            type: string
            example: No one will use it
          description:
            type: string
            example: It is hard to convince people to try something alongside their current project management software (especially as there could be duplication).
          successCriteria:
            type: string
            example: We will know this is no longer a problem when we have got 10 companies interested in using the application.
          createdFromPreviousBet:
            type: string
            example: "44828849-d4fa-4945-a7c6-134e5fbc0a38"
      ProblemView:
        description: Used to display information on a problem / list of basic information on bets linked to the problem.
        type: object
        properties:
          id:
            type: string
            example: "44828849-d4fa-4945-a7c6-134e5fbc0a38"
          name:
            type: string
            example: No one will use it
          description:
            type: string
            example: It is hard to convince people to try something alongside their current project management software (especially as there could be duplication).
          successCriteria:
            type: string
            example: We will know this is no longer a problem when we have got 10 companies interested in using the application.
          createdFromPreviousBet:
            type: string
            example: "44828849-d4fa-4945-a7c6-134e5fbc0a38"
          created:
            type: string
            readOnly: true
            format: date-time
            example: 02/03/2021
          bets:
            type: array
            items:
              $ref: '#/components/schemas/ListItem'
      BetCommentNew:
        description: Form used when adding a comment.
        type: object
        required:
          - comment
        properties:
          comment:
            type: string
            example: Project Speedy
      BetComment:
        description: A comment linked to a bet.
        type: object
        required:
          - name
        properties:
          comment:
            type: string
            example: I think this will be a cheap / easy bet to work on.
          created:
            type: string
            readOnly: true
            format: date-time
            example: 02/03/2021
          createdBy:
            type: string
            readOnly: true
      BetFeedbackNew:
        description: Form used when adding feedback.
        type: object
        required:
          - comment
        properties:
          comment:
            type: string
            example: Project Speedy
      BetFeedback:
        description: A piece of feedback linked to a bet.
        type: object
        required:
          - name
        properties:
          comment:
            type: string
            example: Was difficult to demo application to friends.
          created:
            type: string
            readOnly: true
            format: date-time
            example: 02/03/2021
          createdBy:
            type: string
            readOnly: true
      BetOutcomeNew:
        description: Form used when adding an outcome.
        type: object
        required:
          - comment
        properties:
          comment:
            type: string
            example: Project Speedy
      BetOutcome:
        description: An outcome linked to a bet.
        type: object
        required:
          - name
        properties:
          comment:
            type: string
          created:
            type: string
            readOnly: true
            format: date-time
            example: 02/03/2021
          createdBy:
            type: string
            readOnly: true
      BetView:
        description: All information on a bet.
        type: object
        properties:
          id:
            type: string
            example: "44828849-d4fa-4945-a7c6-134e5fbc0a38"
          name:
            type: string
          created:
            type: string
          status:
            type: string
            example: not started
          timeTotal:
            type: number
            example: 10
          timeCurrent:
            type: number
            example: 5
          comments:
            type: array
            items:
              $ref: '#/components/schemas/BetComment'
          feedback:
            type: array
            items:
              $ref: '#/components/schemas/BetFeedback'
          outcomes:
            type: array
            items:
              $ref: '#/components/schemas/BetOutcome'
          outcome:
            type: string
            example: abandon
      BetNew:
        description: Used to create a new bet.
        type: object
        required:
          - name
        properties:
          name:
            type: string
            example: Suggest to friends
          description:
            type: string
            example: Suggesting the application to friends could be a good way to sow the seed and start to get the application out their. 
          measuresOfSuccess:
            type: string
            example: At least one of them tries / continues to use the product or does not use it and provides a reason which can be addressed to make the application more attractive to future users.
      BetUpdate:
        description: Used to update a bet before it has started.
        type: object
        required:
          - name
        properties:
          name:
            type: string
            example: Suggest to friends
          description:
            type: string
            example: Suggesting the application to friends could be a good way to sow the seed and start to get the application out their. 
          measureOfSuccess:
            type: string
            example: At least one of them tries / continues to use the product or does not use it and provides a reason which can be addressed to make the application more attractive to future users.
          timeTotal:
            type: number
            example: 10
          outcome:
            type: string
  responses:
    NotFound:
      description: Entity not found.
    ActionSuccess:
      description: Action carried out successfully.
    UnAuthorised:
      description: You are not authorised.
  parameters:
    ProjectId:
      name: ProjectId
      in: path
      description: Unique project identifier.
      required: true
      schema:
        type: string
        example: "44828849-d4fa-4945-a7c6-134e5fbc0a38"
    ProblemId:
      name: ProblemId
      in: path
      description: Unique problem identifier.
      required: true
      schema:
        type: string
        example: "44828849-d4fa-4945-a7c6-134e5fbc0a38"
    BetId:
      name: BetId
      in: path
      description: Unique bet identifier.
      required: true
      schema:
        type: string
        example: "44828849-d4fa-4945-a7c6-134e5fbc0a38"
    