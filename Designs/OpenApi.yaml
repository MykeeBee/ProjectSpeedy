openapi: 3.0.3
tags: 
  - name: "Projects"
  - name: "Project"
  - name: "Problem"
  - name: "Bet"
  - name: "Bet Comments"
  - name: "Bet Feedback"
info:
  title: Project Speedy
  description: The goal of project speedy is to create an application that makes running a lean project easy.
  contact:
    name: Matthew Turner
    email: tmatt95@gmail.com
  version: 1.0.0
paths:
  /projects:
    get:
      summary: Gets all projects
      tags: 
        - Projects
      description: Projects allows the application to group problems and bets together in one place.
      responses:
        '200':
          description: A list of all the projects.
          content: 
            application/json:
              schema: 
                type: array
                items:
                  $ref: '#/components/schemas/ListItem'
        '403':
          $ref: '#/components/responses/UnAuthorised'
  /project:
    put:
      summary: Add a new project
      tags: 
        - Project
      description: Every bet needs to be linked to a problem and a problem needs to be linked to a project. This lets the user create a new project. Very little information is required when creating a project. This can be filled in at a later date (as it might not be known at the time).
      requestBody:
        content: 
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectNew'
      responses:
        '202':
          $ref: '#/components/responses/ActionSuccess'
        '403':
          $ref: '#/components/responses/UnAuthorised'
  /project/{ProjectId}:
    get:
      summary: Get project information
      tags: 
        - Project
      description: Returns all the information on a project along with a list of problems attached to it.
      responses:
        '200':
          description: project information and list of problems
          content: 
            application/json:
              schema:
                  $ref: '#/components/schemas/ProjectView'
        '403':
          $ref: '#/components/responses/UnAuthorised'
        '404':
          $ref: '#/components/responses/NotFound'
    post:
      summary: Update a project
      tags: 
        - Project
      description: The create project action has been designed to be simple and contain the minimum number of fields. The user will need to have the ability to update the project as it continues or to add missing information.
      requestBody:
        content: 
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectUpdate'
      responses:
        '202':
          $ref: '#/components/responses/ActionSuccess'
        '403':
          $ref: '#/components/responses/UnAuthorised'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      summary: Delete a project
      tags:
        - Project
      description: This action will delete the project and linked problems / bets (which could be active).
      responses:
        '202':
          $ref: '#/components/responses/ActionSuccess'
        '403':
          $ref: '#/components/responses/UnAuthorised'
        '404':
          $ref: '#/components/responses/NotFound'
    parameters:
      - $ref: '#/components/parameters/ProjectId'
  /project/{ProjectId}/problem:
    put:
      summary: Add a new problem
      tags: 
        - Problem
      description: Add a new problem.
      requestBody:
        content: 
          application/json:
            schema:
              $ref: '#/components/schemas/ProblemNew'
      responses:
        '202':
          description: Problem added.
        '403':
          $ref: '#/components/responses/UnAuthorised'
        '404':
          $ref: '#/components/responses/NotFound'
    parameters:
      - $ref: '#/components/parameters/ProjectId'
  /project/{ProjectId}/problem/{ProblemId}:
    get:
      summary: Get problem information
      tags: 
        - Problem
      description: Returns information on the problem.
      responses:
        '200':
          description: problem information and list of bets.
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemView'
        '403':
          $ref: '#/components/responses/UnAuthorised'
        '404':
          $ref: '#/components/responses/NotFound'
    post:
      summary: Update a problem
      tags: 
        - Problem
      description: Update information on a problem.
      requestBody:
        content: 
          application/json:
            schema:
              $ref: '#/components/schemas/ProblemUpdate'
      responses:
        '202':
          description: Problem added.
        '403':
          $ref: '#/components/responses/UnAuthorised'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      summary: Delete a problem
      tags:
        - Problem
      description: This action will delete the problem and all linked bets (which could be active).
      responses:
        '202':
          $ref: '#/components/responses/ActionSuccess'
        '403':
          $ref: '#/components/responses/UnAuthorised'
        '404':
          $ref: '#/components/responses/NotFound'
    parameters:
      - $ref: '#/components/parameters/ProjectId'
      - $ref: '#/components/parameters/ProblemId'
  /project/{ProjectId}/problem/{ProblemId}/bet/{BetId}/start:
    post:
      summary: Update bet to say it is started
      tags: 
        - Bet
      description: Once a bet has been created / when we are happy with it we want to start it. Once a bet is started there are some fields that will become uneditable.
      responses:
        '202':
          $ref: '#/components/responses/ActionSuccess'
        '404':
          description: Cant find project, problem, bet or they are an invalid combination.
        '403':
          $ref: '#/components/responses/UnAuthorised'
    parameters:
      - $ref: '#/components/parameters/ProjectId'
      - $ref: '#/components/parameters/ProblemId'
      - $ref: '#/components/parameters/BetId'
  /project/{ProjectId}/problem/{ProblemId}/bet/{BetId}/stop:
    post:
      summary: Update bet to finish it early
      tags: 
        - Bet
      description: Allows the user to finish a bet early.
      responses:
        '202':
          $ref: '#/components/responses/ActionSuccess'
        '404':
          description: Cant find project, problem, bet or they are an invalid combination.
        '403':
          $ref: '#/components/responses/UnAuthorised'
    parameters:
      - $ref: '#/components/parameters/ProjectId'
      - $ref: '#/components/parameters/ProblemId'
      - $ref: '#/components/parameters/BetId'
  /project/{ProjectId}/problem/{ProblemId}/bet/{BetId}:
    put:
      summary: Add a new bet
      tags: 
        - Bet
      description: Add a new bet.
      requestBody:
        content: 
          application/json:
            schema:
              $ref: '#/components/schemas/BetNew'
      responses:
        '202':
          description: Problem added.
        '403':
          $ref: '#/components/responses/UnAuthorised'
        '404':
          $ref: '#/components/responses/NotFound'
    get:
      summary: Get bet information
      tags: 
        - Bet
      description: View information on a bet.
      responses:
        '200':
          description: problem information and list of bets.
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/BetView'
        '403':
          $ref: '#/components/responses/UnAuthorised'
        '404':
          $ref: '#/components/responses/NotFound'
    post:
      summary: Update a bet
      tags: 
        - Bet
      description: Add a new bet.
      requestBody:
        content: 
          application/json:
            schema:
              $ref: '#/components/schemas/BetUpdate'
      responses:
        '202':
          description: Problem added.
        '403':
          $ref: '#/components/responses/UnAuthorised'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      summary: Delete a bet
      tags:
        - Bet
      description: This action will delete the bet.
      responses:
        '202':
          $ref: '#/components/responses/ActionSuccess'
        '403':
          $ref: '#/components/responses/UnAuthorised'
        '404':
          $ref: '#/components/responses/NotFound'
    parameters:
      - $ref: '#/components/parameters/ProjectId'
      - $ref: '#/components/parameters/ProblemId'
      - $ref: '#/components/parameters/BetId'
  /project/{ProjectId}/problem/{ProblemId}/bet/{BetId}/comments:
    put:
      summary: Add a comment to a bet
      tags: 
        - Bet Comments
      description: Add comments to a bet.
      requestBody:
        content: 
          application/json:
            schema:
              $ref: '#/components/schemas/BetNew'
      responses:
        '202':
          description: Comment added.
        '403':
          $ref: '#/components/responses/UnAuthorised'
        '404':
          $ref: '#/components/responses/NotFound'
    get:
      summary: Get comments linked to a bet
      tags: 
        - Bet Comments
      description: View information on a bet.
      responses:
        '200':
          description: problem information and list of bets.
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/BetView'
        '403':
          $ref: '#/components/responses/UnAuthorised'
        '404':
          $ref: '#/components/responses/NotFound'
    parameters:
      - $ref: '#/components/parameters/ProjectId'
      - $ref: '#/components/parameters/ProblemId'
      - $ref: '#/components/parameters/BetId'
components:
  schemas:
      ProjectUpdate:
        description: Form used when updating a project.
        type: object
        required:
          - name
        properties:
          name:
            type: string
            example: Project Speedy
          description:
            type: string
            example: The goal of project speedy is to create an application that makes running a lean project easy.
      ListItem:
        description: Used to display brief information on an item (generally used to populate the tiles).
        type: object
        required:
          - name
        properties:
          id:
            type: string
            example: "44828849-d4fa-4945-a7c6-134e5fbc0a38"
          name:
            type: string
            example: Item Name
      ProjectView:
        description: Information on a single project / list of problems within it.
        type: object
        required:
          - name
        properties:
          id:
            type: string
            example: "44828849-d4fa-4945-a7c6-134e5fbc0a38"
          name:
            type: string
            example: Project Speedy
          description:
            type: string
            example: The goal of project speedy is to create an application that makes running a lean project easy.
          created:
            type: string
            readOnly: true
            format: date-time
            example: 02/03/2021
          problems:
            type: array
            items:
              $ref: '#/components/schemas/ListItem'
      ProjectNew:
        description: Form for adding a new project.
        type: object
        required:
          - name
        properties:
          name:
            type: string
            example: Project Speedy
      ProblemNew:
        description: Form used for adding a new problem to the application.
        type: object
        required:
          - name
        properties:
          name:
            type: string
            example: No one will use it
          description:
            type: string
            example: If no one uses the application the it will die. Finding users who are enthusiastic in the product will be inportant.
          successCriteria:
            type: string
            example: We will know this is no longer a problem when we have got 10 companies interested in using the application.
      ProblemUpdate:
        description: Form used for updating a problem.
        type: object
        required:
          - name
        properties:
          name:
            type: string
            example: No one will use it
          description:
            type: string
            example: It is hard to convince people to try something alongside their current project management software (especially as there could be duplication).
          successCriteria:
            type: string
            example: We will know this is no longer a problem when we have got 10 companies interested in using the application.
          createdFromPreviousBet:
            type: boolean
            example: false
      ProblemView:
        description: Used to display information on a problem / list of basic information on bets linked to the problem.
        type: object
        required:
          - name
        properties:
          id:
            type: string
            example: "44828849-d4fa-4945-a7c6-134e5fbc0a38"
          name:
            type: string
            example: No one will use it
          description:
            type: string
            example: It is hard to convince people to try something alongside their current project management software (especially as there could be duplication).
          successCriteria:
            type: string
            example: We will know this is no longer a problem when we have got 10 companies interested in using the application.
          createdFromPreviousBet:
            type: boolean
            example: false
          created:
            type: string
            readOnly: true
            format: date-time
            example: 02/03/2021
          bets:
            type: array
            items:
              $ref: '#/components/schemas/ListItem'
      BetView:
        description: All information on a bet.
        type: object
        required:
          - name
        properties:
          id:
            type: string
            example: "44828849-d4fa-4945-a7c6-134e5fbc0a38"
          name:
            type: string
          created:
            type: string
          status:
            type: string
            example: not started
          comments:
            type: string
            example: <List of comments here>
          feedback:
            type: string
            example: <List of feedback here>
          timeTotal:
            type: number
            example: 10
          timeCurrent:
            type: number
            example: 5
      BetNew:
        description: Used to create a new bet.
        type: object
        required:
          - name
        properties:
          name:
            type: string
            example: Suggest to friends
          description:
            type: string
            example: Suggesting the application to friends could be a good way to sow the seed and start to get the application out their. 
          measureOfSuccess:
            type: string
            example: At least one of them tries / continues to use the product or does not use it and provides a reason which can be addressed to make the application more attractive to future users.
      BetUpdate:
        description: Used to update a bet before it has started.
        type: object
        required:
          - name
        properties:
          name:
            type: string
            example: Suggest to friends
          description:
            type: string
            example: Suggesting the application to friends could be a good way to sow the seed and start to get the application out their. 
          measureOfSuccess:
            type: string
            example: At least one of them tries / continues to use the product or does not use it and provides a reason which can be addressed to make the application more attractive to future users.
          timeTotal:
            type: number
            example: 10
  responses:
    NotFound:
      description: Entity not found.
    ActionSuccess:
      description: Action carried out successfully.
    UnAuthorised:
      description: You are not authorised.
  parameters:
    ProjectId:
      name: ProjectId
      in: path
      description: ID of the project.
      required: true
      schema:
        type: integer
    ProblemId:
      name: ProblemId
      in: path
      description: ID of the problem.
      required: true
      schema:
        type: integer
    BetId:
      name: BetId
      in: path
      description: ID of the bet.
      required: true
      schema:
        type: integer
    